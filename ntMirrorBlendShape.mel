/*
ntMirrorBlendShape v1.1 

update -- 2015-12-29
update -- 2016-03-28 unlock blendshapeOrg channels to avoid error

//directions:
*** for maya 2016
1.Mirror blendShape //scale of the mirror one is not right if blendshapeorg has scale !=1   


*/

//======== Main UI ========
        global proc ntMirrorBlendShape()
        {
                if (`window -ex nt_ficialblendShapeToolUI `)
                deleteUI nt_ficialblendShapeToolUI;
                 
                window -t "Ficial BlendShape Tool N"  nt_ficialblendShapeToolUI ;
                
                //  formLayout mainform;
                frameLayout -lv 1 -l "Instruction : "  noticeframe ;
                           
                            //text -l  " * copy the target , name it \" blendShapeOrg \" \n " ;
                           rowColumnLayout   -nc 2 -cw 120 60 rowCol;
                           text "        Check Symmetry :  ";
                            button  -w 100 -l "Check" -c "abSymCtl(\"favBn\")" ;
                            setParent  rowCol;
                            setParent noticeframe;
                            
                           separator -h 5 ;
                frameLayout -lv 1 -l "Mirror BlendShape : "  mirframe ;
                    text -l  "---- creat a blendShape original poly ----" ;
                 textFieldButtonGrp  -cw3 80 100 70  -l "Original Poly :" -tx "" -bl"<< select" -bc "nt_textfieldEdit" -cc "nt_textfieldEdit"selOrgTFG;
                            text -l  "---- Set Your Naming Convention ----" ;
                            textFieldGrp  -l "Left side as : " -tx "L_" -cw2 110 100  leftsideTFG;
                            textFieldGrp -l "Right side as : " -tx "R_"-cw2 110 100  rightsideTFG;
                            button   -l "Mirror BlendShape" -c "nt_mirBlendShape"   ;
                            button   -l "Delete blendShapeOrg" -c "delete blendShapeOrg;"   ;
                            
                       
                frameLayout -lv 1 -l "Set BlendShape Ficial Ctrl :"  chooseframe ;
                     
                   
                window -e -w 250 -h 80  nt_ficialblendShapeToolUI;
                showWindow nt_ficialblendShapeToolUI;
        }
        
        

/*=================== textfield edit =====================*/
global proc nt_textfieldEdit()
{
    $sel=`ls -sl`;
    if (`size $sel` >1 )
    {
                string $bsorgWin =`window -t "Warning"   -width 280  -h 30`;										
        	    columnLayout  -adj true; 
        		text -l " "; 
        		text -l "You can only select ONE poly !  "; 
        		text -l " "; 
                showWindow $bsorgWin;
                }
     else{
         textFieldButtonGrp  -e -tx $sel selOrgTFG;
         if (`objExists blendShapeOrg`==1)
         {
             delete blendShapeOrg;
             select $sel;
             
             duplicate -rr -n "blendShapeOrg";
             CBunlockAttr "blendShapeOrg.tx";
			CBunlockAttr "blendShapeOrg.ty";
			CBunlockAttr "blendShapeOrg.tz";
			CBunlockAttr "blendShapeOrg.rx";
			CBunlockAttr "blendShapeOrg.ry";
			CBunlockAttr "blendShapeOrg.rz";
			CBunlockAttr "blendShapeOrg.sx";
			CBunlockAttr "blendShapeOrg.sy";
			CBunlockAttr "blendShapeOrg.sz";
			CBunlockAttr "blendShapeOrg.v";	
             setAttr blendShapeOrg.visibility 0;
             select -cl;
         }
         else{
         duplicate -rr -n "blendShapeOrg";
         CBunlockAttr "blendShapeOrg.tx";
		CBunlockAttr "blendShapeOrg.ty";
		CBunlockAttr "blendShapeOrg.tz";
		CBunlockAttr "blendShapeOrg.rx";
		CBunlockAttr "blendShapeOrg.ry";
		CBunlockAttr "blendShapeOrg.rz";
		CBunlockAttr "blendShapeOrg.sx";
		CBunlockAttr "blendShapeOrg.sy";
		CBunlockAttr "blendShapeOrg.sz";
		CBunlockAttr "blendShapeOrg.v";
         setAttr blendShapeOrg.visibility 0;
         select -cl;
         }
     }
}






//======== mirror blendshape proc ========

        global proc nt_mirBlendShape()
        {
                string $leftsideName =`textFieldGrp  -q -tx  leftsideTFG`;
                string $rightsideName =`textFieldGrp  -q -tx  rightsideTFG`;
                    if (`objExists blendShapeOrg`==1)//check if geo "blendShapeOrg" exists
            {
                    string $sel[];
                    $sel=`ls -sl`;//sel  the blendshapes
                    int$i;
                    int $sizeSel=`size ($sel)`;
                    for ($i=0;$i<$sizeSel;$i++)
                         {          
                                    int $matchCheck=` gmatch   $sel[$i] ("\*" +$leftsideName+"\*") `;//check if the sel name right
                                    if ($matchCheck==1)//if the sel contains "_L"
                                        {    
                                          
                                                string $mirror;
                                                string $mirror = substituteAllString($sel[$i], $leftsideName, $rightsideName);//replace "_L" to "_R"
                                                print $mirror;
                                                select $sel[$i];
                                                duplicate -n ("bsCopy"+$i);//duplicate the sel to call it later
                                                select -cl  ;
                                                select -r "blendShapeOrg" ;//duplicated original geo for later use
                                                duplicate -n "bsWarp";//to be blendshaped for later use
                                                //blendShape bsWarp
                                                select -r ("bsCopy"+$i) ;
                                                select -add bsWarp ;
                                                blendShape-n "mirrorBlend" ;//name the blendShape node
                                                setAttr "bsWarp.scaleX" -1;//set bsWarp scaleX to the other side for later warp
                                                //position bsWarp 
                                                select -r ("bsCopy"+$i) ;
                                                select -add bsWarp ;
                                                doCreatePointConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
                                                pointConstraint -offset 0 0 0 -weight 1;
                                                delete bsWarp_pointConstraint1 ;
                                                //duplicate org no need to pos again
                                                select -r bsWarp ;
                                                duplicate -n "forMirror";
                                                setAttr "forMirror.scaleX" 1;
                                                //set warp
                                                select -cl  ;
                                                select -r forMirror ;
                                                select -add bsWarp ;
                                                CreateWrap;//first one is be warped
                                                setAttr ("mirrorBlend."+"bsCopy"+$i) 1;//modify final shape by change blendshape value
                                                //clear
                                                select -r forMirror ;
                                                duplicate -n $mirror;
                                                select -r forMirror ;
                                                select -add bsWarp ;
                                                select -add ("bsCopy"+$i) ;
                                                delete;
                                                setAttr ($mirror+".visibility") 1;
                                               
                                             }
                                            
                                   else//if the sel DOSE NOT contain "_L"
                                         {
                                                int $matchCheck2=` gmatch   $sel[$i] ("*"+$rightsideName+"*" )`;//check if the sel name right
                                                if ($matchCheck2==1)//if the sel contains "_R"
                                                    {
                                                            string $mirror;
                                                            string $mirror= substituteAllString($sel[$i], $rightsideName, $leftsideName);//replace "_R" to "_L"
                                                            select $sel[$i];
                                                            duplicate -n ("bsCopy"+$i);//duplicate the sel to call it later
                                                            select -cl  ;
                                                            select -r "blendShapeOrg" ;//duplicated original geo for later use
                                                            duplicate -n "bsWarp";//to be blendshaped for later use
                                                            //blendShape bsWarp
                                                            select -r ("bsCopy"+$i) ;
                                                            select -add bsWarp ;
                                                            blendShape-n "mirrorBlend" ;//name the blendShape node
                                                            setAttr "bsWarp.scaleX" -1;//set bsWarp scaleX to the other side for later warp
                                                            //position bsWarp 
                                                            select -r ("bsCopy"+$i) ;
                                                            select -add bsWarp ;
                                                            doCreatePointConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
                                                            pointConstraint -offset 0 0 0 -weight 1;
                                                            delete bsWarp_pointConstraint1 ;
                                                            //duplicate org no need to pos again
                                                            select -r bsWarp ;
                                                            duplicate -n "forMirror";
                                                            setAttr "forMirror.scaleX" 1;
                                                            //set warp
                                                            select -cl  ;
                                                            select -r forMirror ;
                                                            select -add bsWarp ;
                                                            CreateWrap;//first one is be warped
                                                            setAttr ("mirrorBlend."+"bsCopy"+$i) 1;//modify final shape by change blendshape value
                                                            //clear
                                                            select -r forMirror ;
                                                            duplicate -n $mirror;
                                                            select -r forMirror ;
                                                            select -add bsWarp ;
                                                            select -add ("bsCopy"+$i) ;
                                                            delete;
                                                            setAttr ($mirror+".visibility") 1;
                                                         
                                                           
                                                            }
                                                    else
                                                        {
                                                            global string $bsnwWin;//set a blendShape Warning window
                                                        	if (`window -exists $bsnwWin`)//check if the window exists
                                                        	    {deleteUI -window $bsnwWin;}//if do delete it
                                                        	else
                                                        	    {
                                                                    string $bsnwWin =`window -t "Warning"   -width 280  -h 80`;//set window layout
                                                        			columnLayout  -adj true; 
                                    								text -l " "; 
                                    								text -l ("Dose sel's name contain \""+$leftsideName+"\" or \""+$rightsideName+"\"?"); 
                                    								text -l " "; 
                                                        	        showWindow $bsnwWin;
                                                        	        }
                                                        	}
                                                }
                                        
                                             
                            }
                  }
        else//if scene does NOT contain geo "blendShapeOrg" than show the warning window
            {
                string $bsorgWin =`window -t "Warning"   -width 280  -h 80`;										
        	    columnLayout  -adj true; 
        		text -l " "; 
        		text -l "Please check if the \"blendShapeOrg\" exists "; 
        		text -l " "; 
                showWindow $bsorgWin;
                }
                
}



/*=========== abSymCheck ==============*/
{
    
global int $abSymProgBarThresh = 800; //number of verts in an operation beyond which a progress bar is shown (set higher for faster computers)
global int $abSymTable[];

global string $abSymRevVertTable[];
global vector $abSymRevPosTable[];
global vector $abSymRevBasePosTable[];
global int $abSymSliderDragging = false; //used to flag when the mouse is dragging a slider

global proc string[] abCheckSym(string $obj, int $axis, float $tol, int $bTable, int $usePiv) {
	//$bTable is bool to use $obj to create and populate $abSymTable
	//which goes a little like {obj.vtx[pos mAxis 1], obj.vtx[neg mAxis 1]}
	//int $usePiv = `checkBox -q -value upoChkBx`;	[checkBox -l "Use Pivot as Origin" -value true upoChkBx;
		
	global int $abSymTable[];
	string $aNegVerts[];
	string $aPosVerts[];
	string $aNonSymVerts[];
	string $aStr[];
	string $vtx;
	string $str;
	int $aPosVertsInt[];
	int $aNegVertsInt[];
	int $aInt[];
	int $totVtx;
	int $i;
	int $j;
	int $mAxisInd = $axis - 1; //mirror axis index (for xform)//mirror axis index (for xform) [int $axisSel = `radioButtonGrp -q -select saRbGrp`; //$axis is 1, 2, 3 -- $negToPos is bool -- 
	int $axis2Ind = ($mAxisInd + 1) % 3;
	int $axis3Ind = ($mAxisInd + 2) % 3;
	int $mod;
	int $prog;
	int $vertCounter = 0;
	float $aNegVertTrans[];
	float $aPosVertTrans[];
	float $aVtxTrans[];
	float $aVtx2Trans[];
	float $bBox[];
	float $mid;
	float $midOffset;
	float $posOffset;
	float $negOffset;
	float $flt;
	float $progNum;
	float $progDenom;
	float $test1;
	float $test2;
	
	float $midOffsetTol = -.0000001;
	
	if ($usePiv){//if use pivot as origin is on
		$aVtxTrans = `xform -q -ws -t $obj`;//query obj's pivot [$obj = $aSelObj[0]; [$aSelObj = `ls -hilite`;
		$mid = $aVtxTrans[$mAxisInd];// $mAxisInd is 0,1,2 choose check mirror x(YZ) or y(XZ) or z(XY) axis
	}else{////?
		if ($bTable){
			$bBox = `xform -q -ws -boundingBox $obj`;
			$mid = $bBox[$mAxisInd] + (($bBox[($mAxisInd+3)] - $bBox[$mAxisInd])/2);
		}else{
			$mid = 0; //if object isn't symmetrical, it's got to be at the origin to measure symmetry
		}
	}
	
	if ($bTable) clear($abSymTable);
		
	$aInt = `polyEvaluate -v $obj`; 
	$totVtx = $aInt[0];
	
	waitCursor -state on;
	progressWindow -title "Working" -progress 0 -status "Sorting";
	$progDenom = $totVtx;
	$flt = ceil($progDenom/50);
	$mod = $flt;

	for ($i=0;$i<$totVtx;$i++){
		
		//prog win
		if (($i % $mod) == 0){ //make the progress bar a bit less resource intensive
			$progNum = $i;
			$prog = ($progNum/$progDenom)*100.0;
			progressWindow -e -progress $prog;
		}
		//end prog win
		
		$vtx = $obj+".vtx["+$i+"]";
		$aVtxTrans = `xform -q -ws -translation $vtx`;
		$midOffset = $aVtxTrans[$mAxisInd] - $mid;
		if ($midOffset >= $midOffsetTol){
			$aPosVerts[size($aPosVerts)] = $vtx;
			if ($bTable){$aPosVertsInt[size($aPosVertsInt)] = $i;}
			$aPosVertTrans[size($aPosVertTrans)] = $aVtxTrans[$mAxisInd];
		}else{
			if ($midOffset < $midOffsetTol){
				$aNegVerts[size($aNegVerts)] = $vtx;
				if ($bTable){$aNegVertsInt[size($aNegVertsInt)] = $i;}
				$aNegVertTrans[size($aNegVertTrans)] = $aVtxTrans[$mAxisInd];
			}
		}
	}
	
	if ($bTable){$str = "Building Symmetry Table";}else{$str = "Checking For Symmetry";}
	progressWindow -e -progress 0 -status $str;
	$progDenom = size($aPosVerts);
	$flt = ceil($progDenom/50);
	$mod = $flt;
	
	//now find nonsymverts
	for ($i=0;$i<size($aPosVerts);$i++){
		
		//prog win
		if (($i % $mod) == 0){ //make the progress bar a bit less resource intensive
			$progNum = $i;
			$prog = ($progNum/$progDenom)*100.0;
			progressWindow -e -progress $prog;
		}
		//end prog win
		
		$vtx = $aPosVerts[$i];
		$posOffset = ($aPosVertTrans[$i] - $mid);
		if ($posOffset < $tol){
			$aPosVerts[$i] = "m";
			$vertCounter ++;
			continue;
		}
		for ($j=0;$j<size($aNegVerts);$j++){
			if ($aNegVerts[$j] == "m") continue;
			$negOffset = $mid - $aNegVertTrans[$j];
			if ($negOffset < $tol){
				$aNegVerts[$j] = "m";
				$vertCounter ++;
				continue;
			}
			if (abs($posOffset - $negOffset) <= $tol){
				$aVtxTrans = `xform -q -ws -t $vtx`;
				$aVtx2Trans = `xform -q -ws -t $aNegVerts[$j]`;
				$test1 = $aVtxTrans[$axis2Ind] - $aVtx2Trans[$axis2Ind];
				$test2 = $aVtxTrans[$axis3Ind] - $aVtx2Trans[$axis3Ind];
				if (abs($test1) < $tol && abs($test2) < $tol){
					//match
					if ($bTable){
						//use this info to build symmetry table
						$abSymTable[size($abSymTable)] = $aPosVertsInt[$i];
						$abSymTable[size($abSymTable)] = $aNegVertsInt[$j];
						$vertCounter += 2;
					}
					$aPosVerts[$i] = $aNegVerts[$j] = "m"; //m is for match
					break;
				}
			}
		}
	}
	//now strip out "m" from $aPosVerts and $aNegVerts, and we'll have asymmetry
	$aStr = {"m"};
	$aPosVerts = stringArrayRemove($aStr, $aPosVerts);
	$aNegVerts = stringArrayRemove($aStr, $aNegVerts);
	$aNonSymVerts = stringArrayCatenate($aPosVerts, $aNegVerts);
	
	if ($bTable){
		$int = size($abSymTable) + $vertCounter;
		if ($vertCounter != $totVtx){
			//object is not symmetrical
			warning "Base geometry is not symmetrical, not all vertices can be mirrored";
		}else{
			print "Base geometry is symmetrical";
		}
	}
	progressWindow -endProgress;
	waitCursor -state off;
	return $aNonSymVerts;
}
global proc abSymCtl(string $action){
	
	global int $abSymTable[];
	global string $abSbg;
	global string $abAltSbg;
	
	string $sel[] = `ls -sl -fl`;
	string $aStr[];
	string $aSelVerts[];
	string $aHiliteObj[];
	string $baseObj = $abSbg;
	string $revertBaseObj = ($abAltSbg != "") ? $abAltSbg : $abSbg;
	string $str;
	string $selMesh;
	float $tol = 0.001;
	int $axisSel = 1;
	int $negToPos = 0;
	int $usePiv = 1;
	int $warned = false; //set if warning has already been passed
	float $revertBias = 1;
	
	if ($action == "rsPrBn"){
		$revertBias = `floatField -q -value rsPrFltFld`;
		$action = "rsBn";
	}
	
	//get selection info
	
	$aStr = `filterExpand -sm 12 $sel`;
	if (size($aStr) > 1){
		warning "Select one polygon object";
		$warned = true;
	}else{
		$selMesh = $aStr[0]; //if an object is selected
	}
	
	//make sure selected components are on only one mesh
	if ($selMesh == ""){
		$aHiliteObj = `ls -hilite`;
		if (size($aHiliteObj) == 1){
			$selMesh = $aHiliteObj[0];
			$aSelVerts = `filterExpand -sm 31 $sel`;
		}else{
			if (size($aHiliteObj) > 1){
				clear($aSelVerts);
				warning "Only one object can be hilited in component mode";
				$warned = true;
			}
		}
	}else{
		select $selMesh; //if two objects are selected
	}
	
	switch ($action){
		
		case "sbgBn":
			if ($selMesh != ""){
				abCheckSym($selMesh, $axisSel, $tol, true, $usePiv);
				$abSbg = $selMesh;
				textField -e -text $selMesh sbgFld;
				button -e -enable true smBn;
				button -e -enable true smvBn;
				button -e -enable true msBn;
				button -e -enable true fsBn;
				button -e -enable true rsBn;
			}else{
				abClearSbg();
			}
			break;
		
		case "favBn":
			if ($selMesh != ""){
				$aSelVerts = abCheckSym($selMesh, $axisSel, $tol, false, $usePiv);
				if (size($aSelVerts) > 0){
					selectMode -component;
					select $aSelVerts;
					print (size($aSelVerts)+" asymmetric vert(s)");
				}else{
					select $selMesh;
					string $abSymCheckWin =`window -t "Warning"   -width 280  -h 80`;										
        	        columnLayout  -adj true; 
        		    text -l " "; 
        		    text -l ($selMesh+" is Symmetrical") ; 
        		    text -l " "; 
        		    window -e -w 200 -h 50 $abSymCheckWin;
                showWindow $abSymCheckWin;
					
				}
			}
			break;
			
		case "smBn":
			if (size($aSelVerts) > 0){
				$aSelVerts = abSelMirror ($selMesh, $aSelVerts);
				select $aSelVerts;
			}
			break;
			
		case "smvBn":
			if ($selMesh != ""){
				$aSelVerts = abSelMovedVerts($selMesh, $baseObj, $tol);
				select $aSelVerts;
			}
			break;
			
		case "smvAltBn":
			if ($selMesh != ""){
				$aSelVerts = abSelMovedVerts($selMesh, $revertBaseObj, $tol);
				select $aSelVerts;
			}
			break;	
			
		case "msBn":
			if (size($aSelVerts) > 0){
				abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, false, $usePiv, $tol);
			}else{
				if ($selMesh != ""){ //if object is selected, select half side verts then pass that as $aSelVerts
					$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, $negToPos, $usePiv, $tol);
					abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, false, $usePiv, $tol);
				}
			}
			break;
			
		case "fsBn":
			if (size($aSelVerts) > 0){
				abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, true, $usePiv, $tol);
			}else{
				if ($selMesh != ""){ //if object is selected, select half side verts then pass that as $aSelVerts
					$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, $negToPos, $usePiv, $tol);
					abMirrorSel($selMesh, $baseObj, $aSelVerts, $axisSel, $negToPos, true, $usePiv, $tol);
				}
			}
			break;
					
		case "rsBn":
			
			if (size($aSelVerts) > 0){
				abRevertSel($aSelVerts, $selMesh, $revertBaseObj, $revertBias);
			}else{
				if ($selMesh != ""){ //if object is selected, select half side verts then pass that as $aSelVerts
					$aSelVerts = abSelSideVerts ($selMesh, $baseObj, $axisSel, 2, $usePiv, $tol); //2 returns all verts
					abRevertSel($aSelVerts, $selMesh, $revertBaseObj, $revertBias);
				}
			}
			break;
			
		case "cBn":
			abClearSbg();
			abSymClearRevTables();
			deleteUI -window abSymWin;
			break;
		
		case "saRbGrp":
			abClearSbg();
			switch ($axisSel){
				case 1:
					$str = "X";
					break;
				case 2:
					$str = "Y";
					break;
				case 3:
					$str = "Z";
					break;
				
			}
			$str = "Operate -"+$str+" to +"+$str;
			checkBox -e -l $str maChkBx;
	}
	setFocus "modelPanel1";
}

}
//abSymCtl("favBn")
/*============================*/

ntMirrorBlendShape;